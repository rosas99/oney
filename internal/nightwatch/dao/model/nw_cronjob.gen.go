// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package model

import (
	"time"
)

const TableNameCronJobM = "nw_cronjob"

// CronJobM mapped from table <nw_cronjob>
type CronJobM struct {
	ID                  int64          `gorm:"column:id;type:bigint(20) unsigned;primaryKey;autoIncrement:true;comment:主键 ID" json:"id"`                                     // 主键 ID
	CronJobID           string         `gorm:"column:cronjob_id;type:varchar(100);not null;comment:CronJob ID" json:"cronjob_id"`                                            // CronJob ID
	UserID              string         `gorm:"column:user_id;type:varchar(100);not null;index:idx_user_id,priority:1;comment:创建人" json:"user_id"`                            // 创建人
	Scope               string         `gorm:"column:scope;type:varchar(256);not null;index:idx_scope,priority:1;default:default;comment:CronJob 作用域" json:"scope"`          // CronJob 作用域
	Name                string         `gorm:"column:name;type:varchar(255);not null;comment:CronJob 名称" json:"name"`                                                        // CronJob 名称
	Description         string         `gorm:"column:description;type:varchar(256);not null;comment:CronJob 描述" json:"description"`                                          // CronJob 描述
	Schedule            string         `gorm:"column:schedule;type:varchar(100);not null;comment:Quartz 格式的调度时间描述" json:"schedule"`                                          // Quartz 格式的调度时间描述
	Status              *CronJobStatus `gorm:"column:status;type:longtext;comment:CronJob 任务状态" json:"status"`                                                               // CronJob 任务状态
	ConcurrencyPolicy   int32          `gorm:"column:concurrency_policy;type:tinyint(4);not null;default:1;comment:作业处理方式（1 串行，2 并行，3 替换）" json:"concurrency_policy"`        // 作业处理方式（1 串行，2 并行，3 替换）
	Suspend             int32          `gorm:"column:suspend;type:tinyint(4);not null;comment:是否挂起（1 挂起，0 不挂起）" json:"suspend"`                                              // 是否挂起（1 挂起，0 不挂起）
	JobTemplate         *JobM          `gorm:"column:job_template;type:longtext;comment:Job 模版" json:"job_template"`                                                         // Job 模版
	SuccessHistoryLimit int32          `gorm:"column:success_history_limit;type:tinyint(4);not null;default:10;comment:要保留的成功完成作业的数量。值必须是非负整数" json:"success_history_limit"` // 要保留的成功完成作业的数量。值必须是非负整数
	FailedHistoryLimit  int32          `gorm:"column:failed_history_limit;type:tinyint(4);not null;default:5;comment:要保留的失败完成作业的数量。值必须是非负整数。" json:"failed_history_limit"`   // 要保留的失败完成作业的数量。值必须是非负整数。
	CreatedAt           time.Time      `gorm:"column:created_at;type:timestamp;not null;default:current_timestamp();comment:创建时间" json:"created_at"`                         // 创建时间
	UpdatedAt           time.Time      `gorm:"column:updated_at;type:timestamp;not null;default:current_timestamp();comment:更新时间" json:"updated_at"`                         // 更新时间
}

// TableName CronJobM's table name
func (*CronJobM) TableName() string {
	return TableNameCronJobM
}
