// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/rosas/onex/internal/nightwatch/dao/model"
)

func newJobM(db *gorm.DB, opts ...gen.DOOption) jobM {
	_jobM := jobM{}

	_jobM.jobMDo.UseDB(db, opts...)
	_jobM.jobMDo.UseModel(&model.JobM{})

	tableName := _jobM.jobMDo.TableName()
	_jobM.ALL = field.NewAsterisk(tableName)
	_jobM.ID = field.NewInt64(tableName, "id")
	_jobM.JobID = field.NewString(tableName, "job_id")
	_jobM.UserID = field.NewString(tableName, "user_id")
	_jobM.Scope = field.NewString(tableName, "scope")
	_jobM.Name = field.NewString(tableName, "name")
	_jobM.Description = field.NewString(tableName, "description")
	_jobM.CronJobID = field.NewString(tableName, "cronjob_id")
	_jobM.Watcher = field.NewString(tableName, "watcher")
	_jobM.Suspend = field.NewInt32(tableName, "suspend")
	_jobM.Params = field.NewField(tableName, "params")
	_jobM.Results = field.NewField(tableName, "results")
	_jobM.Status = field.NewString(tableName, "status")
	_jobM.Conditions = field.NewField(tableName, "conditions")
	_jobM.StartedAt = field.NewTime(tableName, "started_at")
	_jobM.EndedAt = field.NewTime(tableName, "ended_at")
	_jobM.CreatedAt = field.NewTime(tableName, "created_at")
	_jobM.UpdatedAt = field.NewTime(tableName, "updated_at")

	_jobM.fillFieldMap()

	return _jobM
}

type jobM struct {
	jobMDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键 ID
	JobID       field.String // Job ID
	UserID      field.String // 创建人
	Scope       field.String // Job 作用域
	Name        field.String // Job 名称
	Description field.String // Job 描述
	CronJobID   field.String // CronJob ID，可选
	Watcher     field.String // eam-nightwatch watcher 名字
	Suspend     field.Int32  // 是否挂起（1 挂起，0 不挂起）
	Params      field.Field  // Job 参数
	Results     field.Field  // Job 执行结果
	Status      field.String // Job 状态
	Conditions  field.Field  // Job 运行状态
	StartedAt   field.Time   // Job 开始时间
	EndedAt     field.Time   // Job 结束时间
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (j jobM) Table(newTableName string) *jobM {
	j.jobMDo.UseTable(newTableName)
	return j.updateTableName(newTableName)
}

func (j jobM) As(alias string) *jobM {
	j.jobMDo.DO = *(j.jobMDo.As(alias).(*gen.DO))
	return j.updateTableName(alias)
}

func (j *jobM) updateTableName(table string) *jobM {
	j.ALL = field.NewAsterisk(table)
	j.ID = field.NewInt64(table, "id")
	j.JobID = field.NewString(table, "job_id")
	j.UserID = field.NewString(table, "user_id")
	j.Scope = field.NewString(table, "scope")
	j.Name = field.NewString(table, "name")
	j.Description = field.NewString(table, "description")
	j.CronJobID = field.NewString(table, "cronjob_id")
	j.Watcher = field.NewString(table, "watcher")
	j.Suspend = field.NewInt32(table, "suspend")
	j.Params = field.NewField(table, "params")
	j.Results = field.NewField(table, "results")
	j.Status = field.NewString(table, "status")
	j.Conditions = field.NewField(table, "conditions")
	j.StartedAt = field.NewTime(table, "started_at")
	j.EndedAt = field.NewTime(table, "ended_at")
	j.CreatedAt = field.NewTime(table, "created_at")
	j.UpdatedAt = field.NewTime(table, "updated_at")

	j.fillFieldMap()

	return j
}

func (j *jobM) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := j.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (j *jobM) fillFieldMap() {
	j.fieldMap = make(map[string]field.Expr, 17)
	j.fieldMap["id"] = j.ID
	j.fieldMap["job_id"] = j.JobID
	j.fieldMap["user_id"] = j.UserID
	j.fieldMap["scope"] = j.Scope
	j.fieldMap["name"] = j.Name
	j.fieldMap["description"] = j.Description
	j.fieldMap["cronjob_id"] = j.CronJobID
	j.fieldMap["watcher"] = j.Watcher
	j.fieldMap["suspend"] = j.Suspend
	j.fieldMap["params"] = j.Params
	j.fieldMap["results"] = j.Results
	j.fieldMap["status"] = j.Status
	j.fieldMap["conditions"] = j.Conditions
	j.fieldMap["started_at"] = j.StartedAt
	j.fieldMap["ended_at"] = j.EndedAt
	j.fieldMap["created_at"] = j.CreatedAt
	j.fieldMap["updated_at"] = j.UpdatedAt
}

func (j jobM) clone(db *gorm.DB) jobM {
	j.jobMDo.ReplaceConnPool(db.Statement.ConnPool)
	return j
}

func (j jobM) replaceDB(db *gorm.DB) jobM {
	j.jobMDo.ReplaceDB(db)
	return j
}

type jobMDo struct{ gen.DO }

type IJobMDo interface {
	gen.SubQuery
	Debug() IJobMDo
	WithContext(ctx context.Context) IJobMDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IJobMDo
	WriteDB() IJobMDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IJobMDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IJobMDo
	Not(conds ...gen.Condition) IJobMDo
	Or(conds ...gen.Condition) IJobMDo
	Select(conds ...field.Expr) IJobMDo
	Where(conds ...gen.Condition) IJobMDo
	Order(conds ...field.Expr) IJobMDo
	Distinct(cols ...field.Expr) IJobMDo
	Omit(cols ...field.Expr) IJobMDo
	Join(table schema.Tabler, on ...field.Expr) IJobMDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IJobMDo
	RightJoin(table schema.Tabler, on ...field.Expr) IJobMDo
	Group(cols ...field.Expr) IJobMDo
	Having(conds ...gen.Condition) IJobMDo
	Limit(limit int) IJobMDo
	Offset(offset int) IJobMDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IJobMDo
	Unscoped() IJobMDo
	Create(values ...*model.JobM) error
	CreateInBatches(values []*model.JobM, batchSize int) error
	Save(values ...*model.JobM) error
	First() (*model.JobM, error)
	Take() (*model.JobM, error)
	Last() (*model.JobM, error)
	Find() ([]*model.JobM, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobM, err error)
	FindInBatches(result *[]*model.JobM, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.JobM) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IJobMDo
	Assign(attrs ...field.AssignExpr) IJobMDo
	Joins(fields ...field.RelationField) IJobMDo
	Preload(fields ...field.RelationField) IJobMDo
	FirstOrInit() (*model.JobM, error)
	FirstOrCreate() (*model.JobM, error)
	FindByPage(offset int, limit int) (result []*model.JobM, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IJobMDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (j jobMDo) Debug() IJobMDo {
	return j.withDO(j.DO.Debug())
}

func (j jobMDo) WithContext(ctx context.Context) IJobMDo {
	return j.withDO(j.DO.WithContext(ctx))
}

func (j jobMDo) ReadDB() IJobMDo {
	return j.Clauses(dbresolver.Read)
}

func (j jobMDo) WriteDB() IJobMDo {
	return j.Clauses(dbresolver.Write)
}

func (j jobMDo) Session(config *gorm.Session) IJobMDo {
	return j.withDO(j.DO.Session(config))
}

func (j jobMDo) Clauses(conds ...clause.Expression) IJobMDo {
	return j.withDO(j.DO.Clauses(conds...))
}

func (j jobMDo) Returning(value interface{}, columns ...string) IJobMDo {
	return j.withDO(j.DO.Returning(value, columns...))
}

func (j jobMDo) Not(conds ...gen.Condition) IJobMDo {
	return j.withDO(j.DO.Not(conds...))
}

func (j jobMDo) Or(conds ...gen.Condition) IJobMDo {
	return j.withDO(j.DO.Or(conds...))
}

func (j jobMDo) Select(conds ...field.Expr) IJobMDo {
	return j.withDO(j.DO.Select(conds...))
}

func (j jobMDo) Where(conds ...gen.Condition) IJobMDo {
	return j.withDO(j.DO.Where(conds...))
}

func (j jobMDo) Order(conds ...field.Expr) IJobMDo {
	return j.withDO(j.DO.Order(conds...))
}

func (j jobMDo) Distinct(cols ...field.Expr) IJobMDo {
	return j.withDO(j.DO.Distinct(cols...))
}

func (j jobMDo) Omit(cols ...field.Expr) IJobMDo {
	return j.withDO(j.DO.Omit(cols...))
}

func (j jobMDo) Join(table schema.Tabler, on ...field.Expr) IJobMDo {
	return j.withDO(j.DO.Join(table, on...))
}

func (j jobMDo) LeftJoin(table schema.Tabler, on ...field.Expr) IJobMDo {
	return j.withDO(j.DO.LeftJoin(table, on...))
}

func (j jobMDo) RightJoin(table schema.Tabler, on ...field.Expr) IJobMDo {
	return j.withDO(j.DO.RightJoin(table, on...))
}

func (j jobMDo) Group(cols ...field.Expr) IJobMDo {
	return j.withDO(j.DO.Group(cols...))
}

func (j jobMDo) Having(conds ...gen.Condition) IJobMDo {
	return j.withDO(j.DO.Having(conds...))
}

func (j jobMDo) Limit(limit int) IJobMDo {
	return j.withDO(j.DO.Limit(limit))
}

func (j jobMDo) Offset(offset int) IJobMDo {
	return j.withDO(j.DO.Offset(offset))
}

func (j jobMDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IJobMDo {
	return j.withDO(j.DO.Scopes(funcs...))
}

func (j jobMDo) Unscoped() IJobMDo {
	return j.withDO(j.DO.Unscoped())
}

func (j jobMDo) Create(values ...*model.JobM) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Create(values)
}

func (j jobMDo) CreateInBatches(values []*model.JobM, batchSize int) error {
	return j.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (j jobMDo) Save(values ...*model.JobM) error {
	if len(values) == 0 {
		return nil
	}
	return j.DO.Save(values)
}

func (j jobMDo) First() (*model.JobM, error) {
	if result, err := j.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobM), nil
	}
}

func (j jobMDo) Take() (*model.JobM, error) {
	if result, err := j.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobM), nil
	}
}

func (j jobMDo) Last() (*model.JobM, error) {
	if result, err := j.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobM), nil
	}
}

func (j jobMDo) Find() ([]*model.JobM, error) {
	result, err := j.DO.Find()
	return result.([]*model.JobM), err
}

func (j jobMDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.JobM, err error) {
	buf := make([]*model.JobM, 0, batchSize)
	err = j.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (j jobMDo) FindInBatches(result *[]*model.JobM, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return j.DO.FindInBatches(result, batchSize, fc)
}

func (j jobMDo) Attrs(attrs ...field.AssignExpr) IJobMDo {
	return j.withDO(j.DO.Attrs(attrs...))
}

func (j jobMDo) Assign(attrs ...field.AssignExpr) IJobMDo {
	return j.withDO(j.DO.Assign(attrs...))
}

func (j jobMDo) Joins(fields ...field.RelationField) IJobMDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Joins(_f))
	}
	return &j
}

func (j jobMDo) Preload(fields ...field.RelationField) IJobMDo {
	for _, _f := range fields {
		j = *j.withDO(j.DO.Preload(_f))
	}
	return &j
}

func (j jobMDo) FirstOrInit() (*model.JobM, error) {
	if result, err := j.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobM), nil
	}
}

func (j jobMDo) FirstOrCreate() (*model.JobM, error) {
	if result, err := j.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.JobM), nil
	}
}

func (j jobMDo) FindByPage(offset int, limit int) (result []*model.JobM, count int64, err error) {
	result, err = j.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = j.Offset(-1).Limit(-1).Count()
	return
}

func (j jobMDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = j.Count()
	if err != nil {
		return
	}

	err = j.Offset(offset).Limit(limit).Scan(result)
	return
}

func (j jobMDo) Scan(result interface{}) (err error) {
	return j.DO.Scan(result)
}

func (j jobMDo) Delete(models ...*model.JobM) (result gen.ResultInfo, err error) {
	return j.DO.Delete(models)
}

func (j *jobMDo) withDO(do gen.Dao) *jobMDo {
	j.DO = *do.(*gen.DO)
	return j
}
