// Copyright 2024 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/rosas/onex.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rosas/onex/internal/cacheserver/biz/namespaced (interfaces: NamespacedBiz)

// Package namespaced is a generated GoMock package.
package namespaced

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/rosas/onex/pkg/api/cacheserver/v1"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
)

// MockNamespacedBiz is a mock of NamespacedBiz interface.
type MockNamespacedBiz struct {
	ctrl     *gomock.Controller
	recorder *MockNamespacedBizMockRecorder
}

// MockNamespacedBizMockRecorder is the mock recorder for MockNamespacedBiz.
type MockNamespacedBizMockRecorder struct {
	mock *MockNamespacedBiz
}

// NewMockNamespacedBiz creates a new mock instance.
func NewMockNamespacedBiz(ctrl *gomock.Controller) *MockNamespacedBiz {
	mock := &MockNamespacedBiz{ctrl: ctrl}
	mock.recorder = &MockNamespacedBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespacedBiz) EXPECT() *MockNamespacedBizMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockNamespacedBiz) Del(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockNamespacedBizMockRecorder) Del(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockNamespacedBiz)(nil).Del), arg0, arg1)
}

// Get mocks base method.
func (m *MockNamespacedBiz) Get(arg0 context.Context, arg1 string) (*v1.GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v1.GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNamespacedBizMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNamespacedBiz)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockNamespacedBiz) Set(arg0 context.Context, arg1 string, arg2 *anypb.Any, arg3 *durationpb.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockNamespacedBizMockRecorder) Set(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockNamespacedBiz)(nil).Set), arg0, arg1, arg2, arg3)
}
