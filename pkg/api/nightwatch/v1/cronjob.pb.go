// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v4.23.4
// source: nightwatch/v1/cronjob.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ConcurrencyPolicy 描述了作业的处理方式。只能指定以下并发策略中的一个。
// 如果未指定以下任何策略，则默认策略为 ForbidConcurrent
type ConcurrencyPolicy int32

const (
	// ForbidConcurrent 禁止并发运行，如果先前的作业尚未完成，则跳过下一个运行。
	ConcurrencyPolicy_ForbidConcurrent ConcurrencyPolicy = 0
	// AllowConcurrent 允许 CronJobs 并发运行。
	ConcurrencyPolicy_AllowConcurrent ConcurrencyPolicy = 1
	// ReplaceConcurrent 取消当前正在运行的作业，并用一个新的作业替代它。
	ConcurrencyPolicy_ReplaceConcurren ConcurrencyPolicy = 2
)

// Enum value maps for ConcurrencyPolicy.
var (
	ConcurrencyPolicy_name = map[int32]string{
		0: "ForbidConcurrent",
		1: "AllowConcurrent",
		2: "ReplaceConcurren",
	}
	ConcurrencyPolicy_value = map[string]int32{
		"ForbidConcurrent": 0,
		"AllowConcurrent":  1,
		"ReplaceConcurren": 2,
	}
)

func (x ConcurrencyPolicy) Enum() *ConcurrencyPolicy {
	p := new(ConcurrencyPolicy)
	*p = x
	return p
}

func (x ConcurrencyPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConcurrencyPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_nightwatch_v1_cronjob_proto_enumTypes[0].Descriptor()
}

func (ConcurrencyPolicy) Type() protoreflect.EnumType {
	return &file_nightwatch_v1_cronjob_proto_enumTypes[0]
}

func (x ConcurrencyPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConcurrencyPolicy.Descriptor instead.
func (ConcurrencyPolicy) EnumDescriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{0}
}

// CronJob 表示单个 Cron 作业的配置。
type CronJob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CronJob 名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// CronJob ID
	CronJobID string `protobuf:"bytes,2,opt,name=cronJobID,proto3" json:"cronJobID,omitempty"`
	// 创建人
	UserID string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID,omitempty"`
	// CronJob 作用域
	Scope string `protobuf:"bytes,4,opt,name=scope,proto3" json:"scope,omitempty"`
	// CronJob 描述
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Quartz 格式的调度时间描述。http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/tutorial-lesson-06.html
	Schedule string `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// CronJob 任务状态，例如：{"active":[1,2],"lastScheduleTime":1234,"lastSuccessfulTime":1234, "lastJobID": 1234}
	Status *CronJobStatus `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
	// 作业处理方式（1 串行，2 并行，3 替换，默认 1）
	ConcurrencyPolicy ConcurrencyPolicy `protobuf:"varint,8,opt,name=concurrencyPolicy,proto3,enum=cronjob.ConcurrencyPolicy" json:"concurrencyPolicy,omitempty"`
	// 是否挂起（1 挂起，0 不挂起, 默认 0）
	Suspend int32 `protobuf:"varint,9,opt,name=suspend,proto3" json:"suspend,omitempty"`
	// Job 模版
	JobTemplate *Job `protobuf:"bytes,10,opt,name=jobTemplate,proto3" json:"jobTemplate,omitempty"`
	// 要保留的成功完成作业的数量。值必须是非负整数。默认值为 10。
	SuccessHistoryLimit int32 `protobuf:"varint,11,opt,name=successHistoryLimit,proto3" json:"successHistoryLimit,omitempty"`
	// 要保留的失败完成作业的数量。值必须是非负整数。  默认值为 5。
	FailedHistoryLimit int32 `protobuf:"varint,12,opt,name=failedHistoryLimit,proto3" json:"failedHistoryLimit,omitempty"`
	// 创建时间
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// 更新时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (x *CronJob) Reset() {
	*x = CronJob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronJob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJob) ProtoMessage() {}

func (x *CronJob) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJob.ProtoReflect.Descriptor instead.
func (*CronJob) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{0}
}

func (x *CronJob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CronJob) GetCronJobID() string {
	if x != nil {
		return x.CronJobID
	}
	return ""
}

func (x *CronJob) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CronJob) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *CronJob) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CronJob) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *CronJob) GetStatus() *CronJobStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *CronJob) GetConcurrencyPolicy() ConcurrencyPolicy {
	if x != nil {
		return x.ConcurrencyPolicy
	}
	return ConcurrencyPolicy_ForbidConcurrent
}

func (x *CronJob) GetSuspend() int32 {
	if x != nil {
		return x.Suspend
	}
	return 0
}

func (x *CronJob) GetJobTemplate() *Job {
	if x != nil {
		return x.JobTemplate
	}
	return nil
}

func (x *CronJob) GetSuccessHistoryLimit() int32 {
	if x != nil {
		return x.SuccessHistoryLimit
	}
	return 0
}

func (x *CronJob) GetFailedHistoryLimit() int32 {
	if x != nil {
		return x.FailedHistoryLimit
	}
	return 0
}

func (x *CronJob) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CronJob) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CronJobStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active             []int64 `protobuf:"varint,1,rep,packed,name=active,proto3" json:"active,omitempty"`
	LastScheduleTime   int64   `protobuf:"varint,2,opt,name=lastScheduleTime,proto3" json:"lastScheduleTime,omitempty"`
	LastSuccessfulTime int64   `protobuf:"varint,3,opt,name=lastSuccessfulTime,proto3" json:"lastSuccessfulTime,omitempty"`
	LastJobID          string  `protobuf:"bytes,4,opt,name=lastJobID,proto3" json:"lastJobID,omitempty"`
}

func (x *CronJobStatus) Reset() {
	*x = CronJobStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CronJobStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronJobStatus) ProtoMessage() {}

func (x *CronJobStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronJobStatus.ProtoReflect.Descriptor instead.
func (*CronJobStatus) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{1}
}

func (x *CronJobStatus) GetActive() []int64 {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *CronJobStatus) GetLastScheduleTime() int64 {
	if x != nil {
		return x.LastScheduleTime
	}
	return 0
}

func (x *CronJobStatus) GetLastSuccessfulTime() int64 {
	if x != nil {
		return x.LastSuccessfulTime
	}
	return 0
}

func (x *CronJobStatus) GetLastJobID() string {
	if x != nil {
		return x.LastJobID
	}
	return ""
}

type CreateCronJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronJob *CronJob `protobuf:"bytes,1,opt,name=cronJob,proto3" json:"cronJob,omitempty"`
}

func (x *CreateCronJobRequest) Reset() {
	*x = CreateCronJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronJobRequest) ProtoMessage() {}

func (x *CreateCronJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronJobRequest.ProtoReflect.Descriptor instead.
func (*CreateCronJobRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCronJobRequest) GetCronJob() *CronJob {
	if x != nil {
		return x.CronJob
	}
	return nil
}

type CreateCronJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronJobID string `protobuf:"bytes,1,opt,name=cronJobID,proto3" json:"cronJobID,omitempty"`
}

func (x *CreateCronJobResponse) Reset() {
	*x = CreateCronJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCronJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCronJobResponse) ProtoMessage() {}

func (x *CreateCronJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCronJobResponse.ProtoReflect.Descriptor instead.
func (*CreateCronJobResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCronJobResponse) GetCronJobID() string {
	if x != nil {
		return x.CronJobID
	}
	return ""
}

type UpdateCronJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronJobID           string             `protobuf:"bytes,1,opt,name=cronJobID,proto3" json:"cronJobID,omitempty"`
	Name                *string            `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Description         *string            `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Schedule            *string            `protobuf:"bytes,6,opt,name=schedule,proto3,oneof" json:"schedule,omitempty"`
	ConcurrencyPolicy   *ConcurrencyPolicy `protobuf:"varint,8,opt,name=concurrencyPolicy,proto3,enum=cronjob.ConcurrencyPolicy,oneof" json:"concurrencyPolicy,omitempty"`
	Suspend             *int32             `protobuf:"varint,9,opt,name=suspend,proto3,oneof" json:"suspend,omitempty"`
	SuccessHistoryLimit *int32             `protobuf:"varint,11,opt,name=successHistoryLimit,proto3,oneof" json:"successHistoryLimit,omitempty"`
	FailedHistoryLimit  *int32             `protobuf:"varint,12,opt,name=failedHistoryLimit,proto3,oneof" json:"failedHistoryLimit,omitempty"`
}

func (x *UpdateCronJobRequest) Reset() {
	*x = UpdateCronJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronJobRequest) ProtoMessage() {}

func (x *UpdateCronJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronJobRequest.ProtoReflect.Descriptor instead.
func (*UpdateCronJobRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCronJobRequest) GetCronJobID() string {
	if x != nil {
		return x.CronJobID
	}
	return ""
}

func (x *UpdateCronJobRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateCronJobRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateCronJobRequest) GetSchedule() string {
	if x != nil && x.Schedule != nil {
		return *x.Schedule
	}
	return ""
}

func (x *UpdateCronJobRequest) GetConcurrencyPolicy() ConcurrencyPolicy {
	if x != nil && x.ConcurrencyPolicy != nil {
		return *x.ConcurrencyPolicy
	}
	return ConcurrencyPolicy_ForbidConcurrent
}

func (x *UpdateCronJobRequest) GetSuspend() int32 {
	if x != nil && x.Suspend != nil {
		return *x.Suspend
	}
	return 0
}

func (x *UpdateCronJobRequest) GetSuccessHistoryLimit() int32 {
	if x != nil && x.SuccessHistoryLimit != nil {
		return *x.SuccessHistoryLimit
	}
	return 0
}

func (x *UpdateCronJobRequest) GetFailedHistoryLimit() int32 {
	if x != nil && x.FailedHistoryLimit != nil {
		return *x.FailedHistoryLimit
	}
	return 0
}

type UpdateCronJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCronJobResponse) Reset() {
	*x = UpdateCronJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCronJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCronJobResponse) ProtoMessage() {}

func (x *UpdateCronJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCronJobResponse.ProtoReflect.Descriptor instead.
func (*UpdateCronJobResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{5}
}

type GetCronJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronJobID string `protobuf:"bytes,1,opt,name=cronJobID,proto3" json:"cronJobID,omitempty"`
}

func (x *GetCronJobRequest) Reset() {
	*x = GetCronJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronJobRequest) ProtoMessage() {}

func (x *GetCronJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronJobRequest.ProtoReflect.Descriptor instead.
func (*GetCronJobRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{6}
}

func (x *GetCronJobRequest) GetCronJobID() string {
	if x != nil {
		return x.CronJobID
	}
	return ""
}

type GetCronJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronJob *CronJob `protobuf:"bytes,1,opt,name=cronJob,proto3" json:"cronJob,omitempty"`
}

func (x *GetCronJobResponse) Reset() {
	*x = GetCronJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCronJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCronJobResponse) ProtoMessage() {}

func (x *GetCronJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCronJobResponse.ProtoReflect.Descriptor instead.
func (*GetCronJobResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{7}
}

func (x *GetCronJobResponse) GetCronJob() *CronJob {
	if x != nil {
		return x.CronJob
	}
	return nil
}

type ListCronJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListCronJobRequest) Reset() {
	*x = ListCronJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronJobRequest) ProtoMessage() {}

func (x *ListCronJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronJobRequest.ProtoReflect.Descriptor instead.
func (*ListCronJobRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{8}
}

func (x *ListCronJobRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListCronJobRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListCronJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int64      `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	CronJobs   []*CronJob `protobuf:"bytes,2,rep,name=cronJobs,proto3" json:"cronJobs,omitempty"`
}

func (x *ListCronJobResponse) Reset() {
	*x = ListCronJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCronJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCronJobResponse) ProtoMessage() {}

func (x *ListCronJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCronJobResponse.ProtoReflect.Descriptor instead.
func (*ListCronJobResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{9}
}

func (x *ListCronJobResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListCronJobResponse) GetCronJobs() []*CronJob {
	if x != nil {
		return x.CronJobs
	}
	return nil
}

type DeleteCronJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CronJobIDs []string `protobuf:"bytes,1,rep,name=cronJobIDs,proto3" json:"cronJobIDs,omitempty"`
}

func (x *DeleteCronJobRequest) Reset() {
	*x = DeleteCronJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronJobRequest) ProtoMessage() {}

func (x *DeleteCronJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteCronJobRequest) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCronJobRequest) GetCronJobIDs() []string {
	if x != nil {
		return x.CronJobIDs
	}
	return nil
}

type DeleteCronJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteCronJobResponse) Reset() {
	*x = DeleteCronJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nightwatch_v1_cronjob_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCronJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCronJobResponse) ProtoMessage() {}

func (x *DeleteCronJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nightwatch_v1_cronjob_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCronJobResponse.ProtoReflect.Descriptor instead.
func (*DeleteCronJobResponse) Descriptor() ([]byte, []int) {
	return file_nightwatch_v1_cronjob_proto_rawDescGZIP(), []int{11}
}

var File_nightwatch_v1_cronjob_proto protoreflect.FileDescriptor

var file_nightwatch_v1_cronjob_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63,
	0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xbd, 0x04, 0x0a, 0x07, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x6f,
	0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x2a,
	0x0a, 0x0b, 0x6a, 0x6f, 0x62, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x6a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x0b, 0x6a,
	0x6f, 0x62, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xa1, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66,
	0x75, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4a, 0x6f,
	0x62, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x4a,
	0x6f, 0x62, 0x49, 0x44, 0x22, 0x42, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07,
	0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52,
	0x07, 0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x22, 0x35, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x22,
	0xe6, 0x03, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x6e,
	0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x03,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x07, 0x73, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x05, 0x52, 0x13, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x12, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x31, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f,
	0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x49, 0x44, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x72,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x72,
	0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x07, 0x63,
	0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x22, 0x42, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x63, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x72, 0x6f, 0x6e, 0x6a, 0x6f, 0x62, 0x2e, 0x43, 0x72,
	0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x08, 0x63, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x73, 0x22,
	0x36, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x6f, 0x6e, 0x4a,
	0x6f, 0x62, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x72, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2a, 0x54, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x43,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x10, 0x02, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x70, 0x72, 0x6f, 0x6a, 0x2f, 0x6f,
	0x6e, 0x65, 0x78, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x77, 0x61, 0x74, 0x63, 0x68, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nightwatch_v1_cronjob_proto_rawDescOnce sync.Once
	file_nightwatch_v1_cronjob_proto_rawDescData = file_nightwatch_v1_cronjob_proto_rawDesc
)

func file_nightwatch_v1_cronjob_proto_rawDescGZIP() []byte {
	file_nightwatch_v1_cronjob_proto_rawDescOnce.Do(func() {
		file_nightwatch_v1_cronjob_proto_rawDescData = protoimpl.X.CompressGZIP(file_nightwatch_v1_cronjob_proto_rawDescData)
	})
	return file_nightwatch_v1_cronjob_proto_rawDescData
}

var file_nightwatch_v1_cronjob_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nightwatch_v1_cronjob_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_nightwatch_v1_cronjob_proto_goTypes = []interface{}{
	(ConcurrencyPolicy)(0),        // 0: cronjob.ConcurrencyPolicy
	(*CronJob)(nil),               // 1: cronjob.CronJob
	(*CronJobStatus)(nil),         // 2: cronjob.CronJobStatus
	(*CreateCronJobRequest)(nil),  // 3: cronjob.CreateCronJobRequest
	(*CreateCronJobResponse)(nil), // 4: cronjob.CreateCronJobResponse
	(*UpdateCronJobRequest)(nil),  // 5: cronjob.UpdateCronJobRequest
	(*UpdateCronJobResponse)(nil), // 6: cronjob.UpdateCronJobResponse
	(*GetCronJobRequest)(nil),     // 7: cronjob.GetCronJobRequest
	(*GetCronJobResponse)(nil),    // 8: cronjob.GetCronJobResponse
	(*ListCronJobRequest)(nil),    // 9: cronjob.ListCronJobRequest
	(*ListCronJobResponse)(nil),   // 10: cronjob.ListCronJobResponse
	(*DeleteCronJobRequest)(nil),  // 11: cronjob.DeleteCronJobRequest
	(*DeleteCronJobResponse)(nil), // 12: cronjob.DeleteCronJobResponse
	(*Job)(nil),                   // 13: job.Job
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
}
var file_nightwatch_v1_cronjob_proto_depIdxs = []int32{
	2,  // 0: cronjob.CronJob.status:type_name -> cronjob.CronJobStatus
	0,  // 1: cronjob.CronJob.concurrencyPolicy:type_name -> cronjob.ConcurrencyPolicy
	13, // 2: cronjob.CronJob.jobTemplate:type_name -> job.Job
	14, // 3: cronjob.CronJob.createdAt:type_name -> google.protobuf.Timestamp
	14, // 4: cronjob.CronJob.updatedAt:type_name -> google.protobuf.Timestamp
	1,  // 5: cronjob.CreateCronJobRequest.cronJob:type_name -> cronjob.CronJob
	0,  // 6: cronjob.UpdateCronJobRequest.concurrencyPolicy:type_name -> cronjob.ConcurrencyPolicy
	1,  // 7: cronjob.GetCronJobResponse.cronJob:type_name -> cronjob.CronJob
	1,  // 8: cronjob.ListCronJobResponse.cronJobs:type_name -> cronjob.CronJob
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_nightwatch_v1_cronjob_proto_init() }
func file_nightwatch_v1_cronjob_proto_init() {
	if File_nightwatch_v1_cronjob_proto != nil {
		return
	}
	file_nightwatch_v1_job_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_nightwatch_v1_cronjob_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronJob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CronJobStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCronJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCronJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCronJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCronJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nightwatch_v1_cronjob_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCronJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_nightwatch_v1_cronjob_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nightwatch_v1_cronjob_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nightwatch_v1_cronjob_proto_goTypes,
		DependencyIndexes: file_nightwatch_v1_cronjob_proto_depIdxs,
		EnumInfos:         file_nightwatch_v1_cronjob_proto_enumTypes,
		MessageInfos:      file_nightwatch_v1_cronjob_proto_msgTypes,
	}.Build()
	File_nightwatch_v1_cronjob_proto = out.File
	file_nightwatch_v1_cronjob_proto_rawDesc = nil
	file_nightwatch_v1_cronjob_proto_goTypes = nil
	file_nightwatch_v1_cronjob_proto_depIdxs = nil
}
