// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: nightwatch/v1/cronjob.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CronJob with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CronJob) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronJob with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CronJobMultiError, or nil if none found.
func (m *CronJob) ValidateAll() error {
	return m.validate(true)
}

func (m *CronJob) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for CronJobID

	// no validation rules for UserID

	// no validation rules for Scope

	// no validation rules for Description

	// no validation rules for Schedule

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronJobValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronJobValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronJobValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ConcurrencyPolicy

	// no validation rules for Suspend

	if all {
		switch v := interface{}(m.GetJobTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronJobValidationError{
					field:  "JobTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronJobValidationError{
					field:  "JobTemplate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronJobValidationError{
				field:  "JobTemplate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SuccessHistoryLimit

	// no validation rules for FailedHistoryLimit

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronJobValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronJobValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronJobValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CronJobValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CronJobValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CronJobValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CronJobMultiError(errors)
	}

	return nil
}

// CronJobMultiError is an error wrapping multiple validation errors returned
// by CronJob.ValidateAll() if the designated constraints aren't met.
type CronJobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronJobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronJobMultiError) AllErrors() []error { return m }

// CronJobValidationError is the validation error returned by CronJob.Validate
// if the designated constraints aren't met.
type CronJobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronJobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronJobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronJobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronJobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronJobValidationError) ErrorName() string { return "CronJobValidationError" }

// Error satisfies the builtin error interface
func (e CronJobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronJobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronJobValidationError{}

// Validate checks the field values on CronJobStatus with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CronJobStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CronJobStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CronJobStatusMultiError, or
// nil if none found.
func (m *CronJobStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *CronJobStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LastScheduleTime

	// no validation rules for LastSuccessfulTime

	// no validation rules for LastJobID

	if len(errors) > 0 {
		return CronJobStatusMultiError(errors)
	}

	return nil
}

// CronJobStatusMultiError is an error wrapping multiple validation errors
// returned by CronJobStatus.ValidateAll() if the designated constraints
// aren't met.
type CronJobStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CronJobStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CronJobStatusMultiError) AllErrors() []error { return m }

// CronJobStatusValidationError is the validation error returned by
// CronJobStatus.Validate if the designated constraints aren't met.
type CronJobStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CronJobStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CronJobStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CronJobStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CronJobStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CronJobStatusValidationError) ErrorName() string { return "CronJobStatusValidationError" }

// Error satisfies the builtin error interface
func (e CronJobStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCronJobStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CronJobStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CronJobStatusValidationError{}

// Validate checks the field values on CreateCronJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCronJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCronJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCronJobRequestMultiError, or nil if none found.
func (m *CreateCronJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCronJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCronJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCronJobRequestValidationError{
					field:  "CronJob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCronJobRequestValidationError{
					field:  "CronJob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCronJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCronJobRequestValidationError{
				field:  "CronJob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCronJobRequestMultiError(errors)
	}

	return nil
}

// CreateCronJobRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCronJobRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCronJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCronJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCronJobRequestMultiError) AllErrors() []error { return m }

// CreateCronJobRequestValidationError is the validation error returned by
// CreateCronJobRequest.Validate if the designated constraints aren't met.
type CreateCronJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCronJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCronJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCronJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCronJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCronJobRequestValidationError) ErrorName() string {
	return "CreateCronJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCronJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCronJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCronJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCronJobRequestValidationError{}

// Validate checks the field values on CreateCronJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCronJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCronJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCronJobResponseMultiError, or nil if none found.
func (m *CreateCronJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCronJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CronJobID

	if len(errors) > 0 {
		return CreateCronJobResponseMultiError(errors)
	}

	return nil
}

// CreateCronJobResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCronJobResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCronJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCronJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCronJobResponseMultiError) AllErrors() []error { return m }

// CreateCronJobResponseValidationError is the validation error returned by
// CreateCronJobResponse.Validate if the designated constraints aren't met.
type CreateCronJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCronJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCronJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCronJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCronJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCronJobResponseValidationError) ErrorName() string {
	return "CreateCronJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCronJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCronJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCronJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCronJobResponseValidationError{}

// Validate checks the field values on UpdateCronJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCronJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCronJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCronJobRequestMultiError, or nil if none found.
func (m *UpdateCronJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCronJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CronJobID

	if m.Name != nil {
		// no validation rules for Name
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Schedule != nil {
		// no validation rules for Schedule
	}

	if m.ConcurrencyPolicy != nil {
		// no validation rules for ConcurrencyPolicy
	}

	if m.Suspend != nil {
		// no validation rules for Suspend
	}

	if m.SuccessHistoryLimit != nil {
		// no validation rules for SuccessHistoryLimit
	}

	if m.FailedHistoryLimit != nil {
		// no validation rules for FailedHistoryLimit
	}

	if len(errors) > 0 {
		return UpdateCronJobRequestMultiError(errors)
	}

	return nil
}

// UpdateCronJobRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCronJobRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCronJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCronJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCronJobRequestMultiError) AllErrors() []error { return m }

// UpdateCronJobRequestValidationError is the validation error returned by
// UpdateCronJobRequest.Validate if the designated constraints aren't met.
type UpdateCronJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCronJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCronJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCronJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCronJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCronJobRequestValidationError) ErrorName() string {
	return "UpdateCronJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCronJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCronJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCronJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCronJobRequestValidationError{}

// Validate checks the field values on UpdateCronJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCronJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCronJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCronJobResponseMultiError, or nil if none found.
func (m *UpdateCronJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCronJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateCronJobResponseMultiError(errors)
	}

	return nil
}

// UpdateCronJobResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCronJobResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCronJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCronJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCronJobResponseMultiError) AllErrors() []error { return m }

// UpdateCronJobResponseValidationError is the validation error returned by
// UpdateCronJobResponse.Validate if the designated constraints aren't met.
type UpdateCronJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCronJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCronJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCronJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCronJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCronJobResponseValidationError) ErrorName() string {
	return "UpdateCronJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCronJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCronJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCronJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCronJobResponseValidationError{}

// Validate checks the field values on GetCronJobRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCronJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCronJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCronJobRequestMultiError, or nil if none found.
func (m *GetCronJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCronJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CronJobID

	if len(errors) > 0 {
		return GetCronJobRequestMultiError(errors)
	}

	return nil
}

// GetCronJobRequestMultiError is an error wrapping multiple validation errors
// returned by GetCronJobRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCronJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCronJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCronJobRequestMultiError) AllErrors() []error { return m }

// GetCronJobRequestValidationError is the validation error returned by
// GetCronJobRequest.Validate if the designated constraints aren't met.
type GetCronJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCronJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCronJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCronJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCronJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCronJobRequestValidationError) ErrorName() string {
	return "GetCronJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCronJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCronJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCronJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCronJobRequestValidationError{}

// Validate checks the field values on GetCronJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCronJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCronJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCronJobResponseMultiError, or nil if none found.
func (m *GetCronJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCronJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCronJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCronJobResponseValidationError{
					field:  "CronJob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCronJobResponseValidationError{
					field:  "CronJob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCronJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCronJobResponseValidationError{
				field:  "CronJob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCronJobResponseMultiError(errors)
	}

	return nil
}

// GetCronJobResponseMultiError is an error wrapping multiple validation errors
// returned by GetCronJobResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCronJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCronJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCronJobResponseMultiError) AllErrors() []error { return m }

// GetCronJobResponseValidationError is the validation error returned by
// GetCronJobResponse.Validate if the designated constraints aren't met.
type GetCronJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCronJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCronJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCronJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCronJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCronJobResponseValidationError) ErrorName() string {
	return "GetCronJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCronJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCronJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCronJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCronJobResponseValidationError{}

// Validate checks the field values on ListCronJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCronJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCronJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCronJobRequestMultiError, or nil if none found.
func (m *ListCronJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCronJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListCronJobRequestMultiError(errors)
	}

	return nil
}

// ListCronJobRequestMultiError is an error wrapping multiple validation errors
// returned by ListCronJobRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCronJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCronJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCronJobRequestMultiError) AllErrors() []error { return m }

// ListCronJobRequestValidationError is the validation error returned by
// ListCronJobRequest.Validate if the designated constraints aren't met.
type ListCronJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCronJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCronJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCronJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCronJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCronJobRequestValidationError) ErrorName() string {
	return "ListCronJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCronJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCronJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCronJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCronJobRequestValidationError{}

// Validate checks the field values on ListCronJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCronJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCronJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCronJobResponseMultiError, or nil if none found.
func (m *ListCronJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCronJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCount

	for idx, item := range m.GetCronJobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCronJobResponseValidationError{
						field:  fmt.Sprintf("CronJobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCronJobResponseValidationError{
						field:  fmt.Sprintf("CronJobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCronJobResponseValidationError{
					field:  fmt.Sprintf("CronJobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCronJobResponseMultiError(errors)
	}

	return nil
}

// ListCronJobResponseMultiError is an error wrapping multiple validation
// errors returned by ListCronJobResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCronJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCronJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCronJobResponseMultiError) AllErrors() []error { return m }

// ListCronJobResponseValidationError is the validation error returned by
// ListCronJobResponse.Validate if the designated constraints aren't met.
type ListCronJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCronJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCronJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCronJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCronJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCronJobResponseValidationError) ErrorName() string {
	return "ListCronJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCronJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCronJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCronJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCronJobResponseValidationError{}

// Validate checks the field values on DeleteCronJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCronJobRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCronJobRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCronJobRequestMultiError, or nil if none found.
func (m *DeleteCronJobRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCronJobRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCronJobRequestMultiError(errors)
	}

	return nil
}

// DeleteCronJobRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCronJobRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCronJobRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCronJobRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCronJobRequestMultiError) AllErrors() []error { return m }

// DeleteCronJobRequestValidationError is the validation error returned by
// DeleteCronJobRequest.Validate if the designated constraints aren't met.
type DeleteCronJobRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCronJobRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCronJobRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCronJobRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCronJobRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCronJobRequestValidationError) ErrorName() string {
	return "DeleteCronJobRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCronJobRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCronJobRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCronJobRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCronJobRequestValidationError{}

// Validate checks the field values on DeleteCronJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCronJobResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCronJobResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCronJobResponseMultiError, or nil if none found.
func (m *DeleteCronJobResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCronJobResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCronJobResponseMultiError(errors)
	}

	return nil
}

// DeleteCronJobResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCronJobResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCronJobResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCronJobResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCronJobResponseMultiError) AllErrors() []error { return m }

// DeleteCronJobResponseValidationError is the validation error returned by
// DeleteCronJobResponse.Validate if the designated constraints aren't met.
type DeleteCronJobResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCronJobResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCronJobResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCronJobResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCronJobResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCronJobResponseValidationError) ErrorName() string {
	return "DeleteCronJobResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCronJobResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCronJobResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCronJobResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCronJobResponseValidationError{}
