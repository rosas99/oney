// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.23.4
// source: fakeserver/v1/fakeserver.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFakeServerCreateOrder = "/fakeserver.v1.FakeServer/CreateOrder"
const OperationFakeServerDeleteOrder = "/fakeserver.v1.FakeServer/DeleteOrder"
const OperationFakeServerGetOrder = "/fakeserver.v1.FakeServer/GetOrder"
const OperationFakeServerListOrder = "/fakeserver.v1.FakeServer/ListOrder"
const OperationFakeServerUpdateOrder = "/fakeserver.v1.FakeServer/UpdateOrder"

type FakeServerHTTPServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	DeleteOrder(context.Context, *DeleteOrderRequest) (*emptypb.Empty, error)
	GetOrder(context.Context, *GetOrderRequest) (*OrderReply, error)
	ListOrder(context.Context, *ListOrderRequest) (*ListOrderResponse, error)
	UpdateOrder(context.Context, *UpdateOrderRequest) (*emptypb.Empty, error)
}

func RegisterFakeServerHTTPServer(s *http.Server, srv FakeServerHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/orders", _FakeServer_CreateOrder0_HTTP_Handler(srv))
	r.GET("/v1/orders", _FakeServer_ListOrder0_HTTP_Handler(srv))
	r.GET("/v1/orders/{orderID}", _FakeServer_GetOrder0_HTTP_Handler(srv))
	r.PUT("/v1/orders/{orderID}", _FakeServer_UpdateOrder0_HTTP_Handler(srv))
	r.DELETE("/v1/orders/{orderID}", _FakeServer_DeleteOrder0_HTTP_Handler(srv))
}

func _FakeServer_CreateOrder0_HTTP_Handler(srv FakeServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFakeServerCreateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrder(ctx, req.(*CreateOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrderResponse)
		return ctx.Result(200, reply)
	}
}

func _FakeServer_ListOrder0_HTTP_Handler(srv FakeServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFakeServerListOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOrder(ctx, req.(*ListOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListOrderResponse)
		return ctx.Result(200, reply)
	}
}

func _FakeServer_GetOrder0_HTTP_Handler(srv FakeServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFakeServerGetOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrder(ctx, req.(*GetOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OrderReply)
		return ctx.Result(200, reply)
	}
}

func _FakeServer_UpdateOrder0_HTTP_Handler(srv FakeServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFakeServerUpdateOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrder(ctx, req.(*UpdateOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _FakeServer_DeleteOrder0_HTTP_Handler(srv FakeServerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOrderRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFakeServerDeleteOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOrder(ctx, req.(*DeleteOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

type FakeServerHTTPClient interface {
	CreateOrder(ctx context.Context, req *CreateOrderRequest, opts ...http.CallOption) (rsp *CreateOrderResponse, err error)
	DeleteOrder(ctx context.Context, req *DeleteOrderRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetOrder(ctx context.Context, req *GetOrderRequest, opts ...http.CallOption) (rsp *OrderReply, err error)
	ListOrder(ctx context.Context, req *ListOrderRequest, opts ...http.CallOption) (rsp *ListOrderResponse, err error)
	UpdateOrder(ctx context.Context, req *UpdateOrderRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
}

type FakeServerHTTPClientImpl struct {
	cc *http.Client
}

func NewFakeServerHTTPClient(client *http.Client) FakeServerHTTPClient {
	return &FakeServerHTTPClientImpl{client}
}

func (c *FakeServerHTTPClientImpl) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...http.CallOption) (*CreateOrderResponse, error) {
	var out CreateOrderResponse
	pattern := "/v1/orders"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFakeServerCreateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FakeServerHTTPClientImpl) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/orders/{orderID}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFakeServerDeleteOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FakeServerHTTPClientImpl) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...http.CallOption) (*OrderReply, error) {
	var out OrderReply
	pattern := "/v1/orders/{orderID}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFakeServerGetOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FakeServerHTTPClientImpl) ListOrder(ctx context.Context, in *ListOrderRequest, opts ...http.CallOption) (*ListOrderResponse, error) {
	var out ListOrderResponse
	pattern := "/v1/orders"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFakeServerListOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FakeServerHTTPClientImpl) UpdateOrder(ctx context.Context, in *UpdateOrderRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/v1/orders/{orderID}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFakeServerUpdateOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
