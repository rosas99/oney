// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: cacheserver/v1/cacheserver.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetRequestMultiError, or
// nil if none found.
func (m *SetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Key

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetRequestValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetRequestValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Expire != nil {

		if all {
			switch v := interface{}(m.GetExpire()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetRequestValidationError{
						field:  "Expire",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetRequestValidationError{
						field:  "Expire",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpire()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetRequestValidationError{
					field:  "Expire",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetRequestMultiError(errors)
	}

	return nil
}

// SetRequestMultiError is an error wrapping multiple validation errors
// returned by SetRequest.ValidateAll() if the designated constraints aren't met.
type SetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetRequestMultiError) AllErrors() []error { return m }

// SetRequestValidationError is the validation error returned by
// SetRequest.Validate if the designated constraints aren't met.
type SetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRequestValidationError) ErrorName() string { return "SetRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRequestValidationError{}

// Validate checks the field values on GetRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRequestMultiError, or
// nil if none found.
func (m *GetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Key

	if len(errors) > 0 {
		return GetRequestMultiError(errors)
	}

	return nil
}

// GetRequestMultiError is an error wrapping multiple validation errors
// returned by GetRequest.ValidateAll() if the designated constraints aren't met.
type GetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRequestMultiError) AllErrors() []error { return m }

// GetRequestValidationError is the validation error returned by
// GetRequest.Validate if the designated constraints aren't met.
type GetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRequestValidationError) ErrorName() string { return "GetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRequestValidationError{}

// Validate checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetResponseMultiError, or
// nil if none found.
func (m *GetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponseValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpire()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Expire",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetResponseValidationError{
					field:  "Expire",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpire()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetResponseValidationError{
				field:  "Expire",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetResponseMultiError(errors)
	}

	return nil
}

// GetResponseMultiError is an error wrapping multiple validation errors
// returned by GetResponse.ValidateAll() if the designated constraints aren't met.
type GetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetResponseMultiError) AllErrors() []error { return m }

// GetResponseValidationError is the validation error returned by
// GetResponse.Validate if the designated constraints aren't met.
type GetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetResponseValidationError) ErrorName() string { return "GetResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetResponseValidationError{}

// Validate checks the field values on DelRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelRequestMultiError, or
// nil if none found.
func (m *DelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Namespace

	// no validation rules for Key

	if len(errors) > 0 {
		return DelRequestMultiError(errors)
	}

	return nil
}

// DelRequestMultiError is an error wrapping multiple validation errors
// returned by DelRequest.ValidateAll() if the designated constraints aren't met.
type DelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelRequestMultiError) AllErrors() []error { return m }

// DelRequestValidationError is the validation error returned by
// DelRequest.Validate if the designated constraints aren't met.
type DelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelRequestValidationError) ErrorName() string { return "DelRequestValidationError" }

// Error satisfies the builtin error interface
func (e DelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelRequestValidationError{}

// Validate checks the field values on SetSecretRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSecretRequestMultiError, or nil if none found.
func (m *SetSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 253 {
		err := SetSecretRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 253 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 256 {
		err := SetSecretRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 256 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Expire != nil {

		if all {
			switch v := interface{}(m.GetExpire()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetSecretRequestValidationError{
						field:  "Expire",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetSecretRequestValidationError{
						field:  "Expire",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpire()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetSecretRequestValidationError{
					field:  "Expire",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetSecretRequestMultiError(errors)
	}

	return nil
}

// SetSecretRequestMultiError is an error wrapping multiple validation errors
// returned by SetSecretRequest.ValidateAll() if the designated constraints
// aren't met.
type SetSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSecretRequestMultiError) AllErrors() []error { return m }

// SetSecretRequestValidationError is the validation error returned by
// SetSecretRequest.Validate if the designated constraints aren't met.
type SetSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSecretRequestValidationError) ErrorName() string { return "SetSecretRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSecretRequestValidationError{}

// Validate checks the field values on GetSecretRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSecretRequestMultiError, or nil if none found.
func (m *GetSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return GetSecretRequestMultiError(errors)
	}

	return nil
}

// GetSecretRequestMultiError is an error wrapping multiple validation errors
// returned by GetSecretRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSecretRequestMultiError) AllErrors() []error { return m }

// GetSecretRequestValidationError is the validation error returned by
// GetSecretRequest.Validate if the designated constraints aren't met.
type GetSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretRequestValidationError) ErrorName() string { return "GetSecretRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretRequestValidationError{}

// Validate checks the field values on DelSecretRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DelSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DelSecretRequestMultiError, or nil if none found.
func (m *DelSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DelSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	if len(errors) > 0 {
		return DelSecretRequestMultiError(errors)
	}

	return nil
}

// DelSecretRequestMultiError is an error wrapping multiple validation errors
// returned by DelSecretRequest.ValidateAll() if the designated constraints
// aren't met.
type DelSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelSecretRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelSecretRequestMultiError) AllErrors() []error { return m }

// DelSecretRequestValidationError is the validation error returned by
// DelSecretRequest.Validate if the designated constraints aren't met.
type DelSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelSecretRequestValidationError) ErrorName() string { return "DelSecretRequestValidationError" }

// Error satisfies the builtin error interface
func (e DelSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelSecretRequestValidationError{}

// Validate checks the field values on GetSecretResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSecretResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSecretResponseMultiError, or nil if none found.
func (m *GetSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserID

	// no validation rules for Name

	// no validation rules for SecretID

	// no validation rules for SecretKey

	// no validation rules for Expires

	// no validation rules for Status

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSecretResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSecretResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSecretResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSecretResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSecretResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSecretResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSecretResponseMultiError(errors)
	}

	return nil
}

// GetSecretResponseMultiError is an error wrapping multiple validation errors
// returned by GetSecretResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSecretResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSecretResponseMultiError) AllErrors() []error { return m }

// GetSecretResponseValidationError is the validation error returned by
// GetSecretResponse.Validate if the designated constraints aren't met.
type GetSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretResponseValidationError) ErrorName() string {
	return "GetSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretResponseValidationError{}
