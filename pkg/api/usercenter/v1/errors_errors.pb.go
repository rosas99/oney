// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 用户登录失败，身份验证未通过
func IsUserLoginFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserLoginFailed.String() && e.Code == 401
}

// 用户登录失败，身份验证未通过
func ErrorUserLoginFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_UserLoginFailed.String(), fmt.Sprintf(format, args...))
}

// 用户已存在，无法创建用户
func IsUserAlreadyExists(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserAlreadyExists.String() && e.Code == 409
}

// 用户已存在，无法创建用户
func ErrorUserAlreadyExists(format string, args ...interface{}) *errors.Error {
	return errors.New(409, ErrorReason_UserAlreadyExists.String(), fmt.Sprintf(format, args...))
}

// 用户未找到，可能是用户不存在或输入的用户标识有误
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserNotFound.String() && e.Code == 404
}

// 用户未找到，可能是用户不存在或输入的用户标识有误
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_UserNotFound.String(), fmt.Sprintf(format, args...))
}

// 创建用户失败，可能是由于服务器或其他问题导致的创建过程中的错误
func IsUserCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserCreateFailed.String() && e.Code == 541
}

// 创建用户失败，可能是由于服务器或其他问题导致的创建过程中的错误
func ErrorUserCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(541, ErrorReason_UserCreateFailed.String(), fmt.Sprintf(format, args...))
}

// 用户操作被禁止，可能是由于权限不足或其他安全限制导致的
func IsUserOperationForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UserOperationForbidden.String() && e.Code == 403
}

// 用户操作被禁止，可能是由于权限不足或其他安全限制导致的
func ErrorUserOperationForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_UserOperationForbidden.String(), fmt.Sprintf(format, args...))
}

// 密钥达到最大数量限制，无法继续创建新密钥
func IsSecretReachMaxCount(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SecretReachMaxCount.String() && e.Code == 400
}

// 密钥达到最大数量限制，无法继续创建新密钥
func ErrorSecretReachMaxCount(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_SecretReachMaxCount.String(), fmt.Sprintf(format, args...))
}

// 密钥未找到，可能是由于密钥不存在或输入的密钥标识有误
func IsSecretNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SecretNotFound.String() && e.Code == 404
}

// 密钥未找到，可能是由于密钥不存在或输入的密钥标识有误
func ErrorSecretNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_SecretNotFound.String(), fmt.Sprintf(format, args...))
}

// 创建密钥失败，可能是由于服务器或其他问题导致的创建过程中的错误
func IsSecretCreateFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SecretCreateFailed.String() && e.Code == 541
}

// 创建密钥失败，可能是由于服务器或其他问题导致的创建过程中的错误
func ErrorSecretCreateFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(541, ErrorReason_SecretCreateFailed.String(), fmt.Sprintf(format, args...))
}
